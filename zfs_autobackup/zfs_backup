#!/bin/bash

set -e

HOST=$1
SRC=$2
DST=$3
NAME=$4


if ! [ "$NAME" ]; then
    echo "Usage:"
    echo "$0 <host> <srcfilesystem> <dstfilesytem> <backupname>"
    echo
    echo "If host is 'localhost' then it will operate locally without ssh"
    echo "Make sure you use an unique backupname for every backup job."
    echo
    echo "NOTE: set readonly=yes on the target to prevent errors with changed datasets during receive"
    exit 1
fi

SNAP_FORMAT=$NAME

#if you litterally specify localhost, it means its local without ssh
if [ "$HOST" == "localhost" ]; then
    REMOTE_CMD="eval"
else
    REMOTE_CMD="ssh $HOST"
fi

echo "Backupping from $HOST:$SRC to $DST"

LATEST_REMOTE=`$REMOTE_CMD "zfs list -d 1 -r -t snapshot -H -o name $SRC 2>/dev/null"|grep @$SNAP_FORMAT- |tail -1`
LATEST_REMOTE_SNAPSHOT=@`echo $LATEST_REMOTE | cut -f2 -d@`
echo "Latest remote snapshot: $LATEST_REMOTE_SNAPSHOT"

#ignore errors if there is no local fs yet
LATEST_LOCAL=`zfs list -d 1 -r -t snapshot -H -o name $DST 2>/dev/null|grep @$SNAP_FORMAT- |tail -1`
LATEST_LOCAL_SNAPSHOT=@`echo $LATEST_LOCAL | cut -f2 -d@`
echo "Latest local snapshot : $LATEST_LOCAL_SNAPSHOT"


#no snapshots found on one side?
if [ "$LATEST_LOCAL" == "" ] || [ "$LATEST_REMOTE" == "" ]; then
    echo "No local or remote snapshots, performing full send."
    INCREMENTAL=""
    
    if [ "$LATEST_REMOTE" == "" ]; then
        NEW_SNAPSHOT="$SNAP_FORMAT-`date +%s`"
        echo "Creating initial remote snapshot $NEW_SNAPSHOT"
        $REMOTE_CMD "zfs snapshot $SRC@$NEW_SNAPSHOT"
        LATEST_REMOTE_SNAPSHOT=@$NEW_SNAPSHOT
    fi
#both sides have at least one snapshot
else

    #last backup complete?
    if [ "$LATEST_LOCAL_SNAPSHOT" == "$LATEST_REMOTE_SNAPSHOT" ]; then
        #create new remote snapshot
        NEW_SNAPSHOT="$SNAP_FORMAT-`date +%s`"
        echo "Last backup complete, creating new remote snapshot $NEW_SNAPSHOT"
        $REMOTE_CMD "zfs snapshot $SRC@$NEW_SNAPSHOT"
        LATEST_REMOTE_SNAPSHOT=@$NEW_SNAPSHOT
    fi

    echo "Requesting incremental data from $LATEST_LOCAL_SNAPSHOT to $LATEST_REMOTE_SNAPSHOT..."
    INCREMENTAL="-i $LATEST_LOCAL_SNAPSHOT"
fi



if [ "$HOST" == "localhost" ]; then
    #dont use compression when its local
    zfs send -v -p $INCREMENTAL $SRC$LATEST_REMOTE_SNAPSHOT | zfs recv -v -u "$DST" || true
else
    echo "$REMOTE_CMD \"zfs send -v -p $INCREMENTAL $SRC$LATEST_REMOTE_SNAPSHOT | gzip\" | gunzip | zfs recv -v -u \"$DST\""
    $REMOTE_CMD "zfs send -v -p $INCREMENTAL $SRC$LATEST_REMOTE_SNAPSHOT | gzip" | gunzip | zfs recv -v -u "$DST" || true
fi

#recv sometimes exits with code 1 while everything seems fine, so ignore those errors and check if the snapshot is there:
zfs list $DST$LATEST_REMOTE_SNAPSHOT > /dev/null


echo "Checking old remote snapshots that we created..."
KEEP=30
OLD_REMOTES=`$REMOTE_CMD "zfs list -d 1 -r -t snapshot -H -o name $SRC 2>/dev/null"|grep @$SNAP_FORMAT- |grep -v "$LATEST_LOCAL_SNAPSHOT"| grep -v "$LATEST_REMOTE_SNAPSHOT"` || true
COUNT=`echo $OLD_REMOTES|wc -w`
for OLD_REMOTE in $OLD_REMOTES; do
    if [ $COUNT -gt $KEEP ]; then
        echo "Destroying old remote snapshot $OLD_REMOTE..."
        $REMOTE_CMD "zfs destroy $OLD_REMOTE" || true 
        (( COUNT=COUNT-1 ))
    fi
done

KEEP=30
echo "Keeping $KEEP local snapshots, deleting older ones:"
OLD_LOCALS=`zfs list -d 1 -r -t snapshot -H -o name $DST|grep @$SNAP_FORMAT- |grep -v "$LATEST_LOCAL_SNAPSHOT"| grep -v "$LATEST_REMOTE_SNAPSHOT"` || true
COUNT=`echo $OLD_LOCALS|wc -w`
for OLD_LOCAL in $OLD_LOCALS; do
    if [ $COUNT -gt $KEEP ]; then
	echo "Destroying old local snapshot $OLD_LOCAL"
	zfs destroy $OLD_LOCAL || true
	(( COUNT=COUNT-1 ))
    fi    
done

exit 0

